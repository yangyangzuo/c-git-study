
文件的三种状态及其文件的三个阶段:
    现在请注意，如果你希望后面的学习更顺利，请记住下面这些关于 Git 的概念。 
    Git 有三种状态，你的文件可能处于其中之一： 已提交（committed）、已修改（modified） 和 已暂存（staged）。
    Git 项目拥有三个阶段：工作区、暂存区以及 Git目录
        1.working directory(工作目录/工作区):
            已修改:表示修改了文件，但还没保存到数据库中
            是对项目的某个版本独立检出的内容.这些从Git仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改
        2.staging area(index/staged files/cache/current directory cache)暂存区):
            已暂存:表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中
            暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做index，不过一般说法还是叫staging area
        3..git directory(repository/本地仓库/git目录)
            已提交:表示数据已经安全地保存在本地数据库中 
            Git仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。

    基本的 Git 工作流程如下：
        1.在工作区中修改文件。
        2.将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。
        3.提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。
            如果 Git 目录中保存着特定版本的文件，就属于已提交
            如果文件已修改并放入暂存区，就属于已暂存
            如果自上次检出后，作了修改但还没有放到暂存区域，就是已修改







初次运行 Git 前的配置
    既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。
    Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：
    1./etc/gitconfig 文件: 
        包含系统上每一个用户及他们仓库的通用配置。 如果在执行 git config 时带上 --system 选项，那么它就会读写该文件中的配置变量。 
        （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）

    2.~/.gitconfig 或 ~/.config/git/config 文件：
        只针对当前用户。 你可以传递 --global 选项让 Git 读写此文件，这会对你系统上 所有 的仓库生效。

    3.当前使用仓库的Git目录中的config文件（即 .git/config）：
        针对该仓库。 你可以传递 --local 选项让 Git 强制读写此文件，虽然默认情况下用的就是它 （当然，你需要进入某个 Git 仓库中才能让该选项生效。）

    每个级别会覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。

    在 Windows 系统中，
        Git 会查找 $HOME 目录下（一般情况下是 C:\Users\$USER ）的 .gitconfig 文件。 
        Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。 
        如果你在 Windows 上使用 Git 2.x 以后的版本，那么还有一个系统级的配置文件，Windows XP 上在 C:\Documents and Settings\All Users\Application Data\Git\config ，
        Windows Vista 及更新的版本在 C:\ProgramData\Git\config 。
        此文件只能以管理员权限通过 git config -f <file> 来修改。


    你可以通过以下命令查看所有的配置以及它们所在的文件：
    $ git config --list --show-origin




用户信息
    安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 
    这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：
    $ git config --global user.name "John Doe"
    $ git config --global user.email johndoe@example.com
    再次强调，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 
    当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置(默认不写的话是--local)
    很多 GUI 工具都会在第一次运行时帮助你配置这些信息。


文本编辑器
    既然用户信息已经设置完毕，你可以配置默认文本编辑器了，当 Git 需要你输入信息时会调用它。 
    如果未配置，Git 会使用操作系统默认的文本编辑器。
    如果你想使用不同的文本编辑器，例如 Emacs，可以这样做：
        $ git config --global core.editor emacs
    
    在 Windows 系统上，如果你想要使用别的文本编辑器，那么必须指定可执行文件的完整路径。 它可能随你的编辑器的打包方式而不同。
    对于 Notepad++，一个流行的代码编辑器来说，你可能想要使用 32 位的版本， 因为在本书编写时 64 位的版本尚不支持所有的插件。 
    如果你在使用 32 位的 Windows 系统，或在 64 位系统上使用 64 位的编辑器，那么你需要输入如下命令：
        $ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
    
    Note
        Vim、Emacs 和 Notepad++ 都是流行的文本编辑器，通常程序员们会在 Linux 和 macOS 这类基于 Unix 的系统或 Windows 系统上使用它们。 
        如果你在使用其他的或 32 版本的编辑器，请在 core.editor 中查看设置为该编辑器的具体步骤。

    Warning
        如果你不这样设置编辑器，那么当 Git 试图启动它时你可能会被弄糊涂、不知所措。 例如，在 Windows 上 Git 在开始编辑时可能会过早地结束。




检查配置信息
    如果想要检查你的配置，可以使用 git config --list 命令来列出所有 Git 当时能找到的配置。
    $ git config --list
        user.email=502372554@qq.com
        user.name=zuoyang
        credential.helper=store
        core.quotepath=false
        core.repositoryformatversion=0
        core.filemode=true
        core.bare=false
        core.logallrefupdates=true
        remote.origin.url=https://git.youlu.com/FE/pcweb.git
        remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
        branch.master.remote=origin
        branch.master.merge=refs/heads/master
        remote.release.url=https://git.youlu.com/FE/pcweb.git
        remote.release.fetch=+refs/heads/*:refs/remotes/release/*
        branch.release.remote=origin
        branch.release.merge=refs/heads/release
        branch.dev.remote=origin
        branch.dev.merge=refs/heads/dev
        branch.aaaaa.remote=origin
        branch.aaaaa.merge=refs/heads/aaaaa
        ...

    同时列出文件所在的位置
    $ git config --list --show-origin
        file:/home/zuoyang/.gitconfig   user.email=502372554@qq.com
        file:/home/zuoyang/.gitconfig   user.name=zuoyang
        file:/home/zuoyang/.gitconfig   credential.helper=store
        file:/home/zuoyang/.gitconfig   core.quotepath=false
        file:.git/config        core.repositoryformatversion=0
        file:.git/config        core.filemode=true
        file:.git/config        core.bare=false
        file:.git/config        core.logallrefupdates=true
        file:.git/config        remote.origin.url=https://git.youlu.com/FE/pcweb.git
        file:.git/config        remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
        file:.git/config        branch.master.remote=origin
        file:.git/config        branch.master.merge=refs/heads/master
        file:.git/config        remote.release.url=https://git.youlu.com/FE/pcweb.git
        file:.git/config        remote.release.fetch=+refs/heads/*:refs/remotes/release/*
        file:.git/config        branch.release.remote=origin
        file:.git/config        branch.release.merge=refs/heads/release
        file:.git/config        branch.dev.remote=origin
        file:.git/config        branch.dev.merge=refs/heads/dev
        file:.git/config        branch.aaaaa.remote=origin
        file:.git/config        branch.aaaaa.merge=refs/heads/aaaaa

    你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与 ~/.gitconfig）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。

    你可以通过输入 git config <key>： 来检查 Git 的某一项配置
    $ git config user.name
        John Doe

Note
    由于 Git 会从多个文件中读取同一配置变量的不同值，因此你可能会在其中看到意料之外的值而不知道为什么。 
    此时，你可以查询 Git 中该变量的 原始 值，它会告诉你哪一个配置文件最后设置了该值：
    #查看某个配置在哪个文件中设置的
    $ git config --show-origin user.name 
        gfile:/home/zuoyang/.gitconfig	zuoyang



2>>>>.git初始化和基本配置

	2.1>>git的初始化
		把我们的代码文件交给git管理有2种方式:
		第一种, 从别的代码库地址克隆一个新的git代码库
		第二种, 把现有的文件导入到git中(把本地文件交给git仓库管理)
		
		
		2.1.1>>克隆一个别人创建好的git代码库
			语法:
				git clone 地址 [可选目录]
			例如:
				git clone https://github.com/jquery/jquery.git 
				这个时候会在当前目录下创建一个jquery文件夹,并在这个文件夹下初始化一个.git目录
				从远程仓库拉下所有数据放入到.git目录中，
				然后从.git目录中读取最新文件的版本拷贝到刚才创建的jquery文件夹中
				最终，这个jquery文件夹里的文件就是一个完整的jquery代码库
				这个被克隆的代码库和源地址中的代码内容一模一样
				
				
			
		2.1.2>>把现有的文件/文件夹导入到git中
			如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：
			git init
				该命令将会在当前的文件夹中创建一个名为 .git 的子目录，
				这个子目录含有你初始化的Git仓库中所有的必须文件.
				.git文件夹是git自动帮我们生成的，这个里面记录着你的文件的修改和版本信息.
				我们不能自己手动修改该文件夹及里面的内容
				
				我们初始化目录完成后，就可以把我们的文件交于git来管理了,一般我们需要3步:
				1.初始化目录,创建文件
				2.把文件添加到暂存区
				3.根据暂存区的记录把文件添加到代码库
		
			例如:
				git init
				echo "123">1.txt
				git add 1.txt
				git commit -m "提交文件说明"
			//这个提交不成功?提示我们配置用户名和邮箱
			
	
	
	2.2>>git的基本配置
		配置代码上传者的用户名和邮箱
		为什么要配置用户名和邮箱?
			配置邮箱和用户名来记录每次代码提交都是谁提交的，用来区分代码的上传者
			代码提交的时候，如果没有配置用户名和邮箱，是不允许提交的
		
		代码保存到git仓库,分三步,
		第一,git仓库初始化,添加文件、修改文件、删除文件
		第二,把文件添加到暂存区/中转区(staged area),中转区记录了哪些文件需要提交，以及这些文件做了哪些更改
			(git add 命令会把文件交给git跟踪(tracked),被git跟踪的文件，git会监视这些文件，每次提交的时候，
			会给出提示哪些文件做了修改，修改了什么东西)
		第三,根据中转区记录的文件索引，把文件提交到代码库
		
		
		
		
		如何配置用户名和邮箱?
		git config --global user.name "xiaoxiao"
		git config --global user.email "xiaoxiao@163.com"
		
		如何修改用户名和邮箱?
		把命令再执行一遍(或者直接修改对应的配置文件):
		git config --global user.name "xiaoxiao2"
		git config --global user.email "xiaoxiao2@163.com"
		
		如何查看一个具体的配置的值?
		比如查看提交的用户名:
		git config --global --get user.name
		git config --global user.name
		git config --global --get user.email
		git config --global user.email
		如何查查看当前配置下的所有设置用户名和密码?
		git config --global -l
		
		
		
		
		扩展:
		git的配置文件:
		git config命令后面可以带3个选项用来和配置文件关联
		git config --system 
		git config --global
		git config --local
		这3个配置选项分别对象着3个文件
		--system参数选项
			表示在配置的时候会读取/写入你电脑上的 "/etc/gitconfig文件",
			这个文件包含系统上每一个用户及他们仓库的通用配置.
			如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。
		
		--global参数选项
			表示在配置的时候会读取/写入你电脑上的 "~/.gitconfig"文件,该文件只针对当前用户 
			~在windows中表示c:/用户/用户名
			例如:
				当前登陆用户名是administrator
				则 ~/.gitconfig 表示 c:/user/Administrator/.gitconfig
		
		--local参数选项
			表示在配置的时候会读取/写入你电脑上的当前使用仓库的 Git 目录中的 config 文件
			（就是 .git/config）:针对该仓库。
		