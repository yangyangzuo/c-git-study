参考:
    https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B

分支的初始化:
    git init默认创建分支master，并创建head指针指向当前所在的分支master
        当第一次提交后，master指向第一次的提交对象(对象里面的parent属性为null)的地址(指针),而且还有一个head指针指向当前的分支(master)
        当第二次提交后，master指向第二次的提交对象(对象里面的parent属性指向上次的提交对象)的地址(指针),而且还有一个head指针指向当前的分支(master)
        ...
        多次提交之后，由于parent属性的关系，就会形成一个链式结构,这个完整的链式结构，我们可以通过分支来获得(分支对象总是指着最后一次提交的对象)
        注意:
            提交对象:{
                文件大小,
                目录树结构,
                parent指针,
                author,
                commiter,
                提交描述
            }

            分支对象:总是指向最后一次的提交对象
            head指针:总是指向当前的分支对象,例如：你切换了另一个分支，则head指针就指向了另一个分支对象
            提交者(committer)和作者(author)的区别:
                https://stackoverflow.com/questions/18750808/difference-between-author-and-committer-in-git
                author是代码的编写者
                commiter是代码的提交者
                git中允许对代码重写,或者打补丁(https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2)



分支的意义：
    1.并行开发，开发部分功能，未开发完成，不能提交到主分支，可以提交到分支保存



查看分支:
        查看当前本地所有分支:
            git branch
        查看远程所有分支:
            git branch -r
        查看本地和远程所有分支:
            git branch -a
        例如:
            git branch
            执行结果:
                * master

            git branch -a
            执行结果:
                * master
                testbranch
                remotes/origin/HEAD -> origin/master
                remotes/origin/master
                remotes/origin/testb
                remotes/origin/testbbb

            master和testbranch是本地仓库
            下面的master,testb,testbbb是远程仓库
            *表示的是head指针所指向的分支，即:当前所在的分支

创建新分支:
        git branch 分支名
        例如:
            git branch testbranch
            git branch
            执行结果:
                * master
                testbranch
            *所在的行，即是当前代码所在的分支

        当创建一个新分支的时候，这个分支指向的提交对象和我们当前分支所指向的提交对象相同
        分支创建，实际是创建一个指针，指向(当前所在的分支所指向的)提交记录的地址
        例如：当前在master分支，master分支最后一次提交的hash是*****111，那么
        执行git branch newbranch的时候，实际是创建了一个分支名为newbranch,这个新分支指向
        (我们当前所在的分支)master分支最后一次提交的hash******111，此时相当于master和newbranch分支指向同一个提交时间点
        由于我们当前在master分支，所以git里面有一个head指针指向我们的master，表示当前我们在master分支
        如果执行git checkout newbranch,则此时head指针就指向了newbranch，即:我们切换到了newbranch分支
        


切换分支:
    git checkout 命令是检出文件内容
    如果后面是一个分支名，则会把对应的分支里面所有的文件都检出到工作目录
    如果是一个文件，则会把当前分支

        git checkout 分支名
        例如:
            git checkout testbranch
            git branch
            执行结果:
            master
            * testbranch    
            此时*指向testbranch,表示当前所在testbranch分支
            分支的切换实际就是head指针指向一个特定的分支对象，指向的分支就是当前所在的分支
            换句话说:head指针永远指向当前git所在的分支
        注意:
            如果切换了分支，则当前工作区会变成所在的分支版本记录时的文件内容
            即:切换分支做了2件事:
            1.把head指针对象指向特定的分支对象(这里记做分支testbranch)
            2.把当前工作区中的文件按照  这个对应的分支对象(分支testbranch)所指向的提交对象中的(文件结构，目录数结构) 还原

            第一次提交对象-->第二次提交-->........>第n次提交---->n+1次提交
                                ^                   ^
                                |                   |
                                |                   |             
                            master分支          testbranch分支
                                                    ^
                                                    |
                                                 head指针                                                    



        创建一个新分支并且立即切换到该分支上:
            git checkout -b 新分支名
            上面的方法创建的新分支内容和当前所在的分支一样

            如果想指定创建的新分支，是基于哪个分支的，执行
            git checkout -b 新分支名 参考分支名
            例如:
            git checkout -b newBranchName oldBranchName
            git checkout -b newBranchName origin/branchName




删除本地分支:
        git branch -d 分支名
        注意:
            不能删除当前所在的分支
        例如：当前在branchA，则不能通过命令删除branchA，需要先切换到其他分支，再删除当前分支
        删除分支的过程，实际就是删除指向当前提交时间点的一个指针，对于代码和提交的历史记录不会造成任何影响





合并分支:
        例如:把分支testbranch的内容合并到master分支上
        1.切换到master分支
            git checkout master
        2.执行合并命令
            git merge testbranch
        此时分支testbranch被合并到了当前所在的分支(master)

        分支的合并，如果没有代码冲突，则默认会进行快速合并fast-forward，即:直接修改master的指针指向testbranch最后一次提交的时间点

        这样做有一个缺点，就是我们的分支合并的过程不可见，即:我们没有保留这个合并分支的历史记录
        如果我们想保留这个合并分支的历史记录，可以禁用快速合并
        git merge --no-ff testbranch
        此时，会强制我们写一个分支合并记录，即:保留我们分支合并的过程


分支冲突:
        ------------------------------------
        |   <<<<<<< HEAD                    |
        |   ddddd   mmmmmmmmaster           |
        |   =======                         |
        |   ddddd   tttttttestbranchf       |
        |   >>>>>>> testbranch              |
        -------------------------------------
        如果分支发生冲突，则会出现如上所述:
            1.
            <<<<< head和======之间的内容表示当前所在的分支的文件的内容
            head指向的是当前所在的分支

            2.
            ========和>>>>>> testbranch之间的内容表示的是testbranch分支里面的内容

        解决分支,只需要把   <<<<所在行,====所在行,>>>>所在行删除就可以了
        当然，冲突的代码内容，根据需要调整删除
        即可解决冲突，此时，再次add,commit就可以了






远程分支:

    远程仓库创建新分支(以本地创建的新分支作为参考):
                本地创建新分支
                git branch newbranch
                git checkot newbranch
                推送到远程仓库
                git push origin(远程仓库地址或者远程仓库地址别名) newbranch
                这个时候本地创建的分支，就会被推送到远程仓库,远程仓库就有了一个名字为newbranch的分支




    本地仓库创建新分支(以远程创建的新分支作为参照):
                远程仓库创建分支hello

                本地拉去远程所有分支
                git fetch(或者执行git pull)
                本地查看远程所有分支
                git branch -r
                本地切换到拉取的远程创建的新分支(需要使用'远程仓库别名/远程仓库新分支名'的方式切换)
                git checkout origin/hello
                以远程新分支为参照，在本地创建一个新的分支
                git branch localHello
                这样本地的localHello就和远程仓库的hello分支对应起来了
                再切换到本地的localHello分支
                git checkout localHello


	删除远程分支:
		推送一个空分支到远程分支，其实就相当于删除远程分支：
		$ git push origin :testb
		或者
		命令:git push 远程仓库别名/url --delete 远程分支名称
		$ git push origin --delete testbbb
		


实际开发分支结构:
    1.dev分支
        开发人员使用
    2.test分支
        测试和产品经理使用
    3.master分支
        产品发布分支
    4.bugfix(hotfix)分支
        bug修复分支，master分支拉去，修改后，合并到master分支