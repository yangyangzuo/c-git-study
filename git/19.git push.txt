8>>>>>>本地仓库文件推送到远程服务器



git push命令:
    推送当前所在的分支，到远程仓库对应的分支
        git push 远程仓库地址(或者远程仓库地址别名) 本地仓库分支名A

		等价于(省略了:远程仓库名，表示本地仓库名和远程仓库名相同)
		参考:
		https://www.git-scm.com/docs/git-push#Documentation/git-push.txt-ltrefspecgt82308203

		git push 远程仓库地址(或者远程仓库地址别名) 本地仓库分支名A:远程仓库分支名A
        如果远程仓库对应的分支名(和本地仓库某一个分支名A相同的分支名)不存在，则会在远程仓库创建对应的分支名A

    推送本地某个特定的分支，到远程仓库对应的分支
        git push 远程仓库地址(或者远程仓库地址别名) 本地的某一个分支:远程仓库对应的分支名

        如果省略了本地的某一个分支，即:
        git push 远程仓库地址(或者远程仓库地址别名) :远程仓库对应的分支名
        则会把远程仓库对应的分支删除，相当于推动一个空，替换掉远程仓库对应的分支，即:删除

    在推送分支的时候，有时候，我们为了少写几个字母，可以把本地的某个分支和远程仓库的某个分支对应起来
        例如:
        本地有一个test分支，我们想把这个分支对应到远程的test分支
        git push -u test
        或者
        git push --set-upstream test
        则本地的test分支就和远程的test分支对应起来了
        以后再test分支上可以直接执行 git push命令，则就会自动的把本地的test分支推送的远程的test分支
    需要注意的是，如果上游(远程库)中的对应分支名和本地的分支名如果不相同，是无法直接通过git push命令，
    需要明确指明推送的分支名
        例如:
        本地有一个test分支，我们想把这个分支对应到远程的remotetest分支
        git push -u test:remotetest
        此时，远程会创建remotetest分支，内容和本地的test分支相同
        此时如果更改内容后，想把当前的test分支推送到remotetest分支中
        此时会提示错误，
            上游分支(远程分支)和你当前的分支名字不匹配，推送到远程的上游分支，使用
            git push origin head:remotetest
            (git push origin HEAD:remotetest)
            (git push origin test:remotetest)
            或者
            git push origin test(推送本地test分支到远程test分支)



		git push 远程仓库地址	分支名称
	例如:
		git push https://github.com/yangyangzuo/fk.git master
        为了推送方便，我们可以为url建立一个别名
        git remote add [<options>] <name> <url>
        git remote add mycode https://github.com/yangyangzuo/fk.git
        这样就本地的库mycode就和远程的url对应起来了
        在推送的时候，可以直接执行
        git push mycode master
        这条命令会把本地的代码push到名字为mycode对应的https://github.com/yangyangzuo/fk.git上的
        master分支上了


		1.查看当前远程仓库的别名
			列出当前创建了哪些git仓库别名
			git remote
			列出远程git仓库和对应的别名
			git remote -v
			或者
			git remote --verbose
		2.如果当前没有设置对应的远程仓库别名
			可以通过git add [name] [url]来添加

		3.移除对应的远程仓库别名
			git remote remove [name]
			或者
			git remote rm [name]


	例子:
		本地新建分支，并且推送到远程
		假如本地有一个master分支和远程master分支对应
		1.本地创建新分支testbranch
		2.查看远程仓库别名映射，假如是:
		git remote -v
		origin  https://github.com/yangyangzuo/webgl-test.git (fetch)
		origin  https://github.com/yangyangzuo/webgl-test.git (push)
		3.推送到远程仓库
		git push 远程仓库别名(或者远程仓库url) 本地分支名:远程仓库分支名
		(注意:执行该命令式时,
			1.当前所在哪个分支都无所谓,
			2.推送到远程的分支名可以和本地分支名称不相同
			即:
				会根据命令中指定的分支，在远程仓库新建一个分支
			
			如果本地分支和远程新建的分支起的名称不一致，很容易混乱，所以最好名称一致
		)
		git push origin testbranch:testb


		
	


		push命令说明:
		https://git-scm.com/docs/git-push


		git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
				[--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]
				[-u | --set-upstream] [-o <string> | --push-option=<string>]
				[--[no-]signed|--signed=(true|false|if-asked)]
				[--force-with-lease[=<refname>[:<expect>]]]
				[--no-verify] [<repository> [<refspec>…​]]

		简化版:
			git push [<repository> [<refspec>…​]
			git push [<远程主机名>] [<本地分支名>:<远程分支名>]


			
		DESCRIPTION
		描述

		Updates remote refs using local refs, while sending objects necessary to complete the given refs.
		使用本地引用更新远程引用，同时发送完成给定引用所必需的对象。

		You can make interesting things happen to a repository every time you push into it, by setting up hooks there. See documentation for git-receive-pack[1].
		每次推入存储库时，都可以通过设置挂钩在存储库中发生有趣的事情。请参阅git-receive-pack [1]的文档。

		When the command line does not specify where to push with the <repository> argument, branch.*.remote configuration for the current branch is consulted to determine where to push. 
		If the configuration is missing, it defaults to origin.
		如果命令行未指定<repository>参数的推送位置， branch.*.remote则会查询当前分支的配置以确定推送位置。
		如果缺少配置，则默认为origin。
		例如:
			git push 远程仓库地址/仓库别名(respsitory) 本地分支名
			如果远程仓库地址未指定,则查找branch.*.remote配置，如果配置丢失，则默认是origin,即:
			git push [<refspec>…​]
			则等价于
			git push origin [<refspec>…​]



		When the command line does not specify what to push with <refspec>... arguments or --all, --mirror, --tags options, 
		当在命令行中没有使用参数<refspec>...指定(被推动的分支和远程的接收分支) 或--all，--mirror，--tags选项，
		the command finds the default <refspec> by consulting remote.*.push configuration, 
		该命令将查找remote.*.push配置中的默认<refspec>，
		and if it is not found, honors push.default configuration to decide what to push (See git-config[1] for the meaning of push.default).
		如果没有找到它，则通过push.default配置来决定(被推动的分支和远程的接收分支)（见的git-配置[1]为的意思push.default）。
		push.default默认配置模式是simple,可以通过git config 命令设置push.default配置值，例如:
		git config --global push.default matching
		例如:
			git push origin 
			没有指定具体的推送分支和接收分支，则依次查找remote.*.push和push.default配置中的<refspec>



		When neither the command-line nor the configuration specify what to push, the default behavior is used, 
		如果命令行和remote.*.push配置中都没有指定具体的推送分支和接受分支，则使用默认行为
		which corresponds to the simple value for push.default: 
		push.default配置中的默认的值，即:simple (https://git-scm.com/docs/git-config#git-config-pushdefault)
		the current branch is pushed to the corresponding upstream branch, but as a safety measure, the push is aborted if the upstream branch does not have the same name as the local one.
		把当前分支被推送到相应的上游分支，但作为安全措施，如果上游分支不存在和本地相同名字的分支，则推送终止
		例如:
			git push 仓库地址
			等价于
			git push 仓库地址  当前所在的分支名:远程仓库相同的分支名


		综上:
			默认情况下:
				git push
				等价于
				git push origin 当前所在的分支名:远程仓库相同的分支名
		
			注意:如果当前分支名，在远程不存在，则无法使用push.default默认配置模式(simple)推送
			即:
				如果本地有分支test,服务器也有test分支，想把本地test分支推送到服务器test分支,则
				(切换到本地test分支)git push
				等价于
				(切换到本地test分支)git push origin
				等价于
				(切换到本地test分支)git push orgin test
				等价于
				(在本地任意分支)git push origin test:test
				如果本地有分支test,远程服务器没有分支test,则simple默认不允许推送，
			即:
				git push 
				报错:
				fatal: The current branch test3 has no upstream branch.
				To push the current branch and set the remote as upstream, use
					git push --set-upstream origin test3
				远程没有test3分支，需要使用如下命令关联:
				切换到本地test3分支
				git push --set-upstream origin test3
				或者
				git push -u origin test3
				执行一次以后，则本地的test3就和origin仓库的test3建立了关系
				以后，在test3分支上，直接执行如下命令，就可以把test3分支切换到远程test3分支上
				git push 

		

		

		

		

		



	<refspec>…​
	指定使用源仓库(source object)去更新目的仓库(destination)
	<refspec>参数格式:
		+源仓库名(<src>):目的仓库名(<dst>)
		(可选的+)(源仓库<src>):(目的仓库<dst>)

		<src>一般是你要推送的分支的名称，但是也可以是任何的SHA-1 expression,例如:master~4 or HEAD

		The <dst> tells which ref on the remote side is updated with this push. 
		Arbitrary expressions cannot be used here, an actual ref must be named. 
		If git push [<repository>] without any <refspec> argument is set to update some ref 
		at the destination with <src> with remote.<repository>.push configuration variable, 
		:<dst> part can be omitted—​such a push will update a ref that <src> normally updates without any <refspec> on the command line. 
		Otherwise, missing :<dst> means to update the same ref as the <src>.

		<dst>指的是远程的哪个分支被本次推送所更新,这里不能使用sha-a expression,需要一个明确的名字
		如果使用git push <respsitory>命令，后面没有带<refpec>参数


	
	
		
		
		
		