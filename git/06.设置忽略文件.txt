
		
		
		gitignore文件指定的Git应该忽略故意未跟踪文件。Git已经跟踪的文件不受影响
		
		

		7>>>>>设置忽略文件
		1.git init 
		2.git add .
		3.git commit -m "提交说明"
		第2步会把当前文件夹的所有文件都放置到暂存区,会有一些系统或者其他生成的文件
		.gitignore文件里面的内容设置的是被git忽略的文件和目录，
		即:这个文件里面指定的内容不会被git跟踪，不会被git管理
		那么自然也不会被提交到代码库里面
		
		例如:
		test文件夹下有如下文件
			.git(git初始化目录)
			a.html(项目文件)
			.project(ide生成的文件)

		我们只想让git监视a.html,所以此时在test目录创建.gitignore文件,内容如下:
		.project
		.gitignore




		忽略文件规则:
			所有空行或者以 ＃ 开头的行都会被 Git 忽略。

			可以使用标准的 glob 模式匹配。

			匹配模式可以以（/）开头防止递归。

			匹配模式可以以（/）结尾指定目录。

			要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。


		glob模式:
			 glob 模式是指 shell 所使用的简化了的正则表达式。 
			 星号（*）匹配零个或多个任意字符；
			 问号（?）只匹配一个任意字符；
			 [abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；
			 [0-9] 如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 
			 使用两个星号（*) 表示匹配任意中间目录，比如`a/**/z` 可以匹配 a/z, a/b/z 或 `a/b/c/z`等

	例如:
		# 注释信息，会被忽略

		*.[oa]				忽略所有以 .o 或 .a 结尾的文件, 一般这类对象文件和存档文件都是编译过程中出现的
		*~					忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本

		**/node_modules 	忽略当前目录下及其子路录下的node_modules文件夹
		node_modules		忽略当前目录下及其子路录下的node_modules文件夹

		*.a 				忽略以.a结尾的文件
		!lib.a				不忽略lib.a文件，虽然上面指定了忽略以.a结尾的文件，但是这行明确指定要追踪lib.a文件

		/test 				只忽略当前目录下的test文件，但是当前目录下的子目录中test文件不会忽略

		build/				忽略当前目录下的build目录中的所有文件

		doc/*.txt			忽略doc目录下的*.txt文件，但是doc子目录下的*.txt文件不会被忽略

		doc/**/*.txt		忽略doc目录及其子目录下的所有*.txt文件 




