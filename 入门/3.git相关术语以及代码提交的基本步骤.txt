
		
		
4>>>>代码提交到仓库(代码交给我们的代码管理库):

	代码提交要经过3个区域:
		1.代码存放目录(我们实际存在文件的所在文件夹)
		2.git管理库的暂存区(staged area)(git把要管理的文件内容添加到一个索引中(index)中)
		3.git代码管理库(代码存放目录/.git目录)
		
		
	提交需要经过3步：
		1.初始化代码库,添加文件/修改文件/删除文件
		2.把要交给git管理的文件添加到暂存区(实际是把要管理的文件记录到一个索引中)
		3.根据暂存区的索引，找到对应的文件和其修改的内容添加到git仓库
		
		
		
	如何通过命令来实现上面的3步：
		1.初始化代码库,git init在我们的初始化后的仓库中添加/修改/删除文件，新建文件即可 
		2.把要被管理的文件添加到暂存区:
		把当前目录下的所有文件添加到暂存区:	git add .
		把当前目录下的一个具体文件添加到暂存区: git add test.txt
		执行该命令后，实际是把该文件交给git管理，即被git跟踪(tracked file),
		即:git已经标记了该文件，监视该文件的所有改动
		
		3.根据暂存区的索引记录，找到对应的文件和其修改的内容，添加到git仓库:	
			git commit -m "提交说明"
		在提交的时候，必须要有本次提交说明, 如果不写提交说明是无法提交的
		例如:git commit -m ""是无法提交的
		如果省略了-m参数，即: git commit ,这个时候会弹出一个文本编辑器，让你来填写提交说明
		总结:
			1.git init
			2.git add 文件名
			3.git commit -m "提交说明"
			
	vi编辑器:
		编辑内容:  esc键 -->  i --->输入内容
		保存内容:  esc键 --> :w 
		退出:	  esc键 --> :q
		保存并退出: esc键 --> :wq
		不保存退出: esc键 --> :q!
		
		
		
	名词:
		仓库/代码库（repository）
		跟踪(track),跟踪文件(track file)
		暂存(stage),暂存区(stage area)
		提交(commit),提交更改/提交暂存区文件(commit staged file)
	
		跟踪(track):
			我们的工作目录(代码所在的文件夹)下,每个文件都处于两种状态.
			已跟踪(tracked)或者未跟踪(untracked)	
			只要我们对一个文件执行过一次命令:git add 文件名
			那么这个文件就被跟踪了,即:纳入我们git的代码管理之中了,只要这个文件有任何的改变，我们git都能知道
			如果你不执行git add 命令，git不会自动的把它纳入跟踪的范围之内
