https://git-scm.com/docs/gitignore



NAME
    gitignore - Specifies intentionally untracked files to ignore
    intentionally[ɪnˈtɛnʃənəli]故意地；有意地；蓄意地
    gitignore - 显示指定不追踪的文件以忽略


SYNOPSIS
    [sɪˈnɑːpsɪs](著作、剧本等的)大纲，提要，概要，梗概
    $XDG_CONFIG_HOME/git/ignore, 
    $GIT_DIR/info/exclude, 
    .gitignore

    说明:
        GIT_DIR
            https://git-scm.com/docs/git#_guides
            If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the repository. 
            默认GIT_DIR指向仓库下的.git目录
            The --git-dir command-line option also sets this value.


DESCRIPTION
    A gitignore file specifies intentionally untracked files that Git should ignore. 
    一个gitignore文件明确指定 需要Git应该忽略的未跟踪文件
    Files already tracked by Git are not affected; see the NOTES below for details.
    Git已经跟踪的文件不受影响；有关详细信息，请参见下面的注释。

    Each line in a gitignore file specifies a pattern. 
    gitignore文件中的每一行都指定一个模式。
    When deciding whether to ignore a path, Git normally checks gitignore patterns from multiple sources, with the following order of precedence, from highest to lowest
    在决定是否忽略路径时，Git通常会检查多个源的gitignore匹配模式,按照如下优先级顺序,从高到低
    (within one level of precedence, the last matching pattern decides the outcome):
    （在一个优先级别内，最后一个匹配模式决定结果）：
        1.Patterns read from the command line for those commands that support them.
        命令行中 支持参数的命令 中读取的模式

        2.Patterns read from a .gitignore file in the same directory as the path, or in any parent directory, 
        .gitignore文件所在目录作为相对目录
        从相对目录中的.gitignore文件中读取或从任何父目录中的文件读取的模式
        with patterns in the higher level files (up to the toplevel of the work tree) being overridden by those in lower level files down to the directory containing the file. 
        ，高层目录中的文件（直到工作树的顶层）中的模式被较低级别目录中的(包含.gitignore文件)文件中的模式覆盖
        These patterns match relative to the location of the .gitignore file. 
        这些模式匹配相对于.gitignore文件位置
        A project normally includes such .gitignore files in its repository, containing patterns for files generated as part of the project build.
        项目通常在其存储库中包含.gitignore文件，其中包含项目构建时而生成的文件的模式(例如:.o,.code,.class,.exe)
        例如:project目录下有目录a和目录b
        project下的.gitignore文件配置中的对应内容会被目录a和目录b下的.gitignore文件覆盖,
        每个.gitignore文件会对当前目录及其子目录生效,但是子目录中的.gitignore配置又会覆盖父目录的配置


        3.Patterns read from $GIT_DIR/info/exclude.
        从$GIT_DIR/info/exclude读取的模式

        4.Patterns read from the file specified by the configuration variable core.excludesFile.
        从变量core.excludesFile中读取的模式


    Which file to place a pattern in depends on how the pattern is meant to be used.
    放置到哪个忽略模式文件取决于如何使用匹配模式
        Patterns which should be version-controlled and distributed to other repositories via clone 
        模式应该被版本控制,并通过克隆分发给其他仓库
        (i.e., files that all developers will want to ignore) should go into a .gitignore file.
        （即，所有开发人员都想忽略的.gitignore文件）应该放入一个文件中。
        
        Patterns which are specific to a particular repository but which do not need to be shared with other related repositories 
        对于特定仓库,不需要和其他仓库共享的忽略模式
        (e.g., auxiliary files that live inside the repository but are specific to one user’s workflow) should go into the $GIT_DIR/info/exclude file.
        （例如，位于存储库内但特定于一个用户的工作流程的辅助文件）应放入该$GIT_DIR/info/exclude文件中(.git/info/exclude)

        Patterns which a user wants Git to ignore in all situations (e.g., backup or temporary files generated by the user’s editor of choice)
        用户希望Git在所有情况下都忽略的模式（例如，由用户选择的编辑器生成的备份或临时文件）
        generally go into a file specified by core.excludesFile in the user’s ~/.gitconfig. 
        通常在~/.gitconfig文件中的core.excludesFile选项指定
        Its default value is $XDG_CONFIG_HOME/git/ignore. 
        其默认值为$XDG_CONFIG_HOME/git/ignore
        If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead.
        如果$XDG_CONFIG_HOME未设置或为空，则使用$HOME/.config/git/ignore


        https://git-scm.com/docs/git-config
            core.excludesFile
            Specifies the pathname to the file that contains patterns to describe paths that are not meant to be tracked, 
            in addition to .gitignore (per-directory) and .git/info/exclude. 
            Defaults to $XDG_CONFIG_HOME/git/ignore. 
            If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead. See gitignore[5].



    The underlying Git plumbing tools, such as git ls-files and git read-tree, read gitignore patterns specified by command-line options, 
    or from files specified by command-line options.
    基本的Git管道工具，例如 git ls-files和git read-tree，从命令行选项指定的模式中读取，或者从命令行选项指定的文件中读取(1)
    Higher-level Git tools, such as git status and git add, use patterns from the sources specified above.
    更高级别的Git工具（例如git status和git add）使用上述指定的另外几种来源中的模式(2,3,4)






PATTERN FORMAT
模式格式
    A blank line matches no files, so it can serve as a separator for readability.
    空行不匹配任何文件，因此可以用作分隔符以提高可读性。

    A line starting with # serves as a comment. Put a backslash ("\") in front of the first hash for patterns that begin with a hash.
    以＃开头的行用作注释。对于以#开头的模式，请在第一个#之前放置反斜杠\

    Trailing spaces are ignored unless they are quoted with backslash ("\").
    除非使用反斜杠"\ "，否则将忽略尾随空格。

    An optional prefix "!" which negates the pattern; any matching file excluded by a previous pattern will become included again. 
    可选前缀!,用于否定模式；先前模式排除的所有匹配文件将再次包含在内
    

    It is not possible to re-include a file if a parent directory of that file is excluded. 
    如果某个文件的父目录被排除在外，则无法重新包含该文件
    Git doesn’t list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined. 
    由于性能原因，Git不会列出被排除的目录，因此所包含文件上的任何模式（无论它们在何处定义）均无效。
    Put a backslash ("\") in front of the first "!" for patterns that begin with a literal "!", for example, "\!important!.txt".
    对于以文字！开头的模式请在第一个!前面加上反斜杠，例如: \!important!.txt


    The slash / is used as the directory separator. Separators may occur at the beginning, middle or end of the .gitignore search pattern.
    斜杠/用作目录分隔符。分隔符可能出现在.gitignore搜索模式的开始，中间或结尾。

    If there is a separator at the beginning or middle (or both) of the pattern, then the pattern is relative to the directory level of the particular .gitignore file itself. 
    如果在模式的开头或中间（或两者）有分隔符，则该模式是相对于特定.gitignore文件本身的目录级别的。
    Otherwise the pattern may also match at any level below the .gitignore level.
    否则，模式也可能在该级别以下的任何级别匹配.gitignore。

    If there is a separator at the end of the pattern then the pattern will only match directories, otherwise the pattern can match both files and directories.
    如果模式末尾有分隔符，则该模式将仅匹配目录，否则该模式可以同时匹配文件和目录。

    For example, a pattern doc/frotz/ matches doc/frotz directory, but not a/doc/frotz directory; 
    例如，模式doc/frotz/匹配doc/frotz目录，但不匹配a/doc/frotz目录；
    (因为此时的路径是相对于.gitignore文件所在的目录,doc/frotz/等价于/doc/frotz/,即完整路径:.gitignore文件所在目录/doc/frotz/)
    however frotz/ matches frotz and a/frotz that is a directory (all paths are relative from the .gitignore file).
    但是frotz/匹配frotz和a/frotz(这是一个目录)（所有路径都是.gitignore文件的相对路径）。

    An asterisk "*" matches anything except a slash.     
    星号“*”匹配除斜杠之外的所有内容
    The character "?" matches any one character except "/". 
    字符?匹配/以外的任何一个字符
    The range notation, e.g. [a-zA-Z], can be used to match one of the characters in a range. 
    范围符号（例如[a-zA-Z]）可用于匹配范围内的字符之一
    See fnmatch(3) and the FNM_PATHNAME flag for a more detailed description.
    有关更多详细说明，请参见fnmatch（3）和FNM_PATHNAME标志。

    Two consecutive asterisks ("**") in patterns matched against full pathname may have special meaning:
    完整路径名匹配的模式中的两个连续星号(**)可能具有特殊含义：
    A leading "**" followed by a slash means match in all directories. 
    **开头后紧跟斜杠表示在所有目录中均匹配。
    For example, "**/foo" matches file or directory "foo" anywhere, the same as pattern "foo". 
    例如，“**/foo”匹配任何位置下的文件或目录foo,与foo相同的
    "**/foo/bar" matches file or directory "bar" anywhere that is directly under directory "foo".
    **/foo/bar匹配任意位置下的foo/bar文件或者目录

    A trailing "/**" matches everything inside. 
    以/**结尾的,匹配路径下的所有内容.
    For example, "abc/**" matches all files inside directory "abc", 
    例如:abc/**匹配abc目录下的所有内容
    relative to the location of the .gitignore file, with infinite depth.
    （abc目录是相对于.gitignore文件位置）以无限深度进行匹配。

    A slash followed by two consecutive asterisks then a slash matches zero or more directories. 
    斜杠后跟两个连续的星号，然后斜杠匹配零个或多个目录。
    For example, "a/**/b" matches "a/b", "a/x/b", "a/x/y/b" and so on.
    例如，“ a/**/b”匹配“ a/b”，“ a/x/b”，“ a/x/y/b”等。
    Other consecutive asterisks are considered regular asterisks and will match according to the previous rules.
    其他连续的星号被视为常规星号，并将根据之前的规则进行匹配。








CONFIGURATION
    The optional configuration variable core.excludesFile indicates a path to a file containing patterns of file names to exclude, 
    可选的配置变量core.excludesFile指示文件的路径，其中包含要排除的文件名的pattern
    similar to $GIT_DIR/info/exclude. 
    类似于 $GIT_DIR/info/exclude。
    Patterns in the exclude file are used in addition to those in $GIT_DIR/info/exclude.
    除了$GIT_DIR/info/exclude中的文件pattern以外，(变量core.excludesFile指示文件的路径)路径文件中的pattern也会排除

NOTES
    The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.
    gitignore文件的目的是确保未被Git跟踪的某些文件保持未跟踪状态。
    To stop tracking a file that is currently tracked, use git rm --cached.
    要停止跟踪当前跟踪的文件，请使用 git rm --cached
    例如:
        git rm --cached file_path
        git commit -m '停止版本库管理某个文件'
        git push.

    说明:
        rm: 是仅仅删除working directory里的文件,对于git,需要执行git命令,例如,add,commit
        git rm: 等价于rm和git add .
        git rm --cached: 
            保留本地文件，仅仅删除暂存区(index/staging area/staged files/cache/current directory cache)中的文件,
            删除后,该文件相当于没有被git版本控制.
            即:停止跟踪该文件的变化

EXAMPLES
    The pattern hello.* matches any file or folder whose name begins with hello. 
    hello.*模式匹配名称以开头的任何文件或文件夹

    If one wants to restrict this only to the directory and not in its subdirectories, one can prepend the pattern with a slash, 
    如果只想将此限制于目录而不是其子目录，则可以在模式前面加上斜杠
    i.e. /hello.*; the pattern now matches hello.txt, hello.c but not a/hello.java.
    即/hello.*；模式现在匹配hello.txt，hello.c但是不匹配 a/hello.java
    (因为开头/中间/(开头和中间都有)由斜杠,则这个路径是把.gitignore文件所在的路径作为相对路径)

    The pattern foo/ will match a directory foo and paths underneath it, 
    该模式foo/将匹配目录foo及目录下的内容
    but will not match a regular file or a symbolic link foo (this is consistent with the way how pathspec works in general in Git)
    但不匹配正则表达式文件(不匹配正则表达式符号)或符号链接foo（这与pathspec在Git中的一般工作方式一致）
    The pattern doc/frotz and /doc/frotz have the same effect in any .gitignore file. 
    模式doc/frotz和/doc/frotz在任何.gitignore文件中都具有相同的效果。
    In other words, a leading slash is not relevant if there is already a middle slash in the pattern.
    换句话说，如果模式中已经存在中间斜杠，那么前导斜杠就无关紧要(开始和中间由斜杠,则路径是相对于.gitignore文件所在路径)

    The pattern "foo/*", matches "foo/test.json" (a regular file), "foo/bar" (a directory), 
    模式foo/*匹配foo/test.json（常规文件）和foo/bar（目录）
    but it does not match "foo/bar/hello.c" (a regular file), as the asterisk in the pattern does not match "bar/hello.c" which has a slash in it.
    但不匹配foo/bar/hello.c（常规文件），因为该模式中的*不匹配(其中带有斜杠的bar/hello.c)

        $ git status
            [...]
            # Untracked files:
            [...]
            #       Documentation/foo.html
            #       Documentation/gitignore.html
            #       file.o
            #       lib.a
            #       src/internal.o
            [...]
        $ cat .git/info/exclude
            # ignore objects and archives, anywhere in the tree.
            *.[oa]
        $ cat Documentation/.gitignore
            # ignore generated html files,
            *.html
            # except foo.html which is maintained by hand
            !foo.html
        $ git status
            [...]
            # Untracked files:
            [...]
            #       Documentation/foo.html
            [...]

    Another example:

        $ cat .gitignore
            vmlinux*
        $ ls arch/foo/kernel/vm*
            arch/foo/kernel/vmlinux.lds.S
        $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore

    The second .gitignore prevents Git from ignoring arch/foo/kernel/vmlinux.lds.S.

    Example to exclude everything except a specific directory foo/bar (note the /* - without the slash, the wildcard would also exclude everything within foo/bar):

        $ cat .gitignore
            # exclude everything except directory foo/bar
            /*
            !/foo
            /foo/*
            !/foo/bar
SEE ALSO
    git-rm[1], gitrepository-layout[5], git-check-ignore[1]

GIT
    Part of the git[1] suite

 